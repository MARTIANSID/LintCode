class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
         int n=graph.length;
         List<List<Integer>> g=new ArrayList<>();
        
        Arrays.sort(initial);
        
        for(int i=0;i<n;i++)g.add(new ArrayList<>());
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1){
                    if(i!=j)
                    g.get(i).add(j);
                }
            }
        }
        
     
        
        boolean[] visited=new boolean[n];
        
     
        
        
        int min=(int)1e9,ans=-1;
        
        for(int node:initial){
            visited[node]=true;
            int count=0;
            for(int ele:initial){
                if(!visited[ele])
                count+=dfs(g,visited,ele)+1;
            }
          
            if(count<min){
                min=count;
                ans=node;
            }
        
            
            visited=new boolean[n];
        }
        
        
        return ans;
        
    }
    public int dfs(List<List<Integer>> graph,boolean[] visited,int src){
        visited[src]=true;
        int count=0;
        for(int child:graph.get(src)){
            if(!visited[child]){
                count+=dfs(graph,visited,child)+1;
            }
        }
        return count;
    }
}